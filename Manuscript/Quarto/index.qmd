---
title: The Art of Scientific computation 
subtitle: A comparison of techniques for simulation of the abelian sandpile model
authors:
  - name: (James) Reuben Bender
    affiliation: The University of Melbourne
    roles: writing
    corresponding: true
bibliography: TASC.bib
date: today
---

## The abelian sandpile model

### Introduction to the model

The abelian sandpile model is a cellular automaton inspired by the casding behaviour of collections of sand grains piled to a critical height @bak_self-organized_1988 . Often, and hereafter, referred to as the Bak-Tang-Weisenfeld (BTW) model after its early investigators @bak_self-organized_1987, the model has become a prototypical example of 'self-organised criticality' in physical systems @dhar_self-organized_1990 and has inspired numerous extensions (see @jarai_sandpile_2018 for review).

The model is defined on a lattice, where each point ('site') holds some number of sand grains (i.e. can be thought of as being at certain 'height'). When a particular number of grains accumulate on a site (i.e. a site reaches some 'threshold height'), the pile becomes unstable and *topples*, sending one grain to each of its neighbors (itsef losing that number of grains). This spread of sand grains can cause a chain reaction of topplings -an 'avalanche'- that can propagate through the lattice. While each topple is simple and deterministic, predicting the size and shape of the avalanches on a large lattice with an arbitrary height distribution can be non-trivial - a problem compounded as we model the behaviour of the system over time (i.e. as we sequentially add grains). Therefore, the abelian sandpile model is a good candidate for computational simulation. By repeating the toppling/avalanche process iteratively, we may characterize features of the sandpile model (e.g. the distribution of avalanche sizes, the average number of grains present on the lattice, or any apparent equilibrium states) statistically rather than analytically.

This project aims to present methods of simulating the BTW model

When using a finite grid and losing grains at the edges, our output is subject to so called 'finite size effects', whereby extreme events are less common than we would expect on an infinite grid. This is because the avalanches are more likely to be cut off by the boundaries. To a \### Applications of the BTW model e.g. simulation of physical systems, traffic flow, forest fires, epidemiological models etc. \## Scientific programming tools

In large sandpiles, which have the potential for large scale avalanves (e.g. involving millions of topples), the computational tools and techniques used to simulate the model are crucial. A secomdary aim of this progject (in adittion to presenting the BTW model) is to explore several alternative computational techniques for developing and simulating the model. There are two main aspects I will consider:

Algorithm design: The way in which the toppling and stabilisation algorithms implemented can have a significant impact on the efficiency of the simulation. These design decisions will depend on the backend on which the simulation is run - e.g. Does the algorithm complexity scale efficiently with the lattice size (to avoid memory bottlenecks)? Can the algorithm make use of the multithreading capabilities of modern CPUs (or, moreover, GPUs)? Therefore, there is unlikely to be a single optimal algorithm, but rather a trade-off between different factors. I will compare the performance of several different algorithms for simulating the BTW model.

Programming languages: The choice of programming language can also have a significant impact on the efficiency of simulation; both in the sense of the time taken to run the simulation, and the ease of developing and maintaining code. Modern scientific programming typically falls into a two-language paridigm, wherein a relatively high-level, dynamic language (usually python) is used for rapid prototyping and data analysis, and a lower-level, statically typed and compiled language (e.g. C, C++, Fortran) is used for computationally intensive tasks. There is some middle ground here with the use of high level wrappers in dynamic languages that call high performance compiled code for performance critical tasks (e.g. numpy, scipy, numba in python).

While these approaches well established and can result in highly efficient implimentations, the two language approach has drawbacks. The most obvious is the need to develop (and potentially maintain) two separate codebases. Moreover, the specialised skills needed to develop and maintain high performance code in a low-level language can be a barrier to entry for many researchers. This barrier can be compounded by the discontinuity in source material between two codebases. For example, localising and adressing bugs can require more elaborate error handling and logging when the code is split between two languages.

The Julia language was developed as an alternative to the two-language approach \@. A high level, dynamic language Julia's progressive typing and type inference system, along with just-in-time compilation, intends to allow for easily readable and maintainable code that can be optimised for performance without leaving the language - a language that 'walks like python, runs like C'.

This report will present a comparison of the performance of several different algorithms for simulating the BTW model, implemented in Julia and python. The aim is to explore the trade-offs between algorithm design and programming language choice, and to potentially to inform students or researchers devevloping their own simulations of the BTW model.

# Part 1: Implimenting a naive model is several programming languages

## Basic toppling and stabilisation algorithms

### the 'push' topple algorithm

The push algorithm is a simple way to implement the toppling of a site in a sandpile model. The implimentation follow the intuitive desription of the toppling process: if a certain site $X_ij$ is at/above the height threshold $k$, and so is unstable. stabilisiation of this site occurrs by distributing its grains to it's four neighbours. i.e. each of ${X_{i-1,j}, X_{i+1,j}, X_{i,j-1}, X_{i,j+1}}$ recieves one grain and $X_ij$ looses four grains. @fig-pushtopple

![](figures/push_topple.svg){#fig-pushtopple}

``` pseudocode
#| label: alg-pushtopple
#| pdf-placement: "htb!"
#| pdf-line-number: true

\begin{algorithm}
\caption{Push toppling algorithm}
\begin{algorithmic}
  \If {$X_{i} \geq k$}
      \State $Y_{i} \gets X_{i} - k$
      \For{each neighbor $j$ of $i$}
          \State $Y_j \gets X_j + 1$
      \EndFor
  \Else
      \State $Y_i \gets X_i$
  \EndIf 
\end{algorithmic}
\end{algorithm}
```
### Naive stabilisation algorithm

The naive stabilisation algorithm is naive in in the sense that it does not assume any information about where topples might occur (i.e. it checks every site, c.f.the targeted algorithm). The algorithm iterates over each site in the lattice applying a toppling rule (e.g. the push algorithm) until no sites are above the threshold.

``` pseudocode
#| label: alg-naivestabilise
#| pdf-placement: "htb!"
#| pdf-line-number: true

\begin{algorithm}
\caption{Naive stabilisation algorithm}
\begin{algorithmic}
\While {any site in $X$ is above $k$}
  \For {each site $i$ in $X$}
      \If {$X_i \geq k$}
          \State $Y$ $\gets$ topple!(X, i)
      \Else
          \State $Y_i$ $\gets$ $X_i$
      \EndIf 
  \EndFor
\EndWhile
\end{algorithmic}
\end{algorithm}
```

## Benchmarking setup

To compare the performance across languages, a consistent test setup is needed. Thankfully, the deterministic nature of the sandpile model allows the simple construction of sandpiles with known stabilisation times. Given a NxN lattice, test sandpiles can be constructed by filling the central $3 < n< N$ sites of an empty lattice with $k-1$ grains. addition of a single grain at the center of the lattice will cause increasing number of topplings as $n$ increases. Such regular grids will be used to test the performance of implementations of the naive push stabilisation algorithm in python, and julia. Specific implimentations of the algorithm in each language are given in appendix 1.

## Results

The performance of the naive stabilisation algorithm was tested on a 101x101 lattice with $k=4$ grains. The number of topplings required to stabilise the lattice was recorded for each $n$ in the range $3 < n < 100$. The results are shown in @fig-languageperf

![](figures/language_stabilisation_benchmark.pdf){#fig-languageperf}